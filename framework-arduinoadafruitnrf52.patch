diff --git a/cores/nRF5/freertos/portable/CMSIS/nrf52/port_cmsis_systick.c b/cores/nRF5/freertos/portable/CMSIS/nrf52/port_cmsis_systick.c
index da9f159..bd7ebea 100644
--- a/cores/nRF5/freertos/portable/CMSIS/nrf52/port_cmsis_systick.c
+++ b/cores/nRF5/freertos/portable/CMSIS/nrf52/port_cmsis_systick.c
@@ -176,7 +176,7 @@ void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
         configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
         if ( xModifiableIdleTime > 0 )
         {
-#if 0  // With FreeRTOS sd_app_evt_wait increases power consumption with FreeRTOS compared to _WFE (NRFFOSDK-11174)
+#if 1  // With FreeRTOS sd_app_evt_wait increases power consumption with FreeRTOS compared to _WFE (NRFFOSDK-11174)
 #ifdef SOFTDEVICE_PRESENT // TODO
             uint8_t sd_en = 0;
             (void) sd_softdevice_is_enabled(&sd_en);
diff --git a/libraries/Bluefruit52Lib/src/BLEAdvertising.cpp b/libraries/Bluefruit52Lib/src/BLEAdvertising.cpp
index b8b76f7..4181cf5 100644
--- a/libraries/Bluefruit52Lib/src/BLEAdvertising.cpp
+++ b/libraries/Bluefruit52Lib/src/BLEAdvertising.cpp
@@ -418,7 +418,7 @@ void BLEAdvertising::_eventHandler(ble_evt_t* evt)
     break;
 
     case BLE_GAP_EVT_DISCONNECTED:
-      if ( bitRead(_conn_mask, conn_hdl) && (0 == Bluefruit.connected()) )
+      if ( bitRead(_conn_mask, conn_hdl) && (0 == Bluefruit.Periph.connected()) )
       {
         bitClear(_conn_mask, conn_hdl);
 
diff --git a/libraries/Bluefruit52Lib/src/BLEPeriph.cpp b/libraries/Bluefruit52Lib/src/BLEPeriph.cpp
index 3f8766b..d8818e1 100644
--- a/libraries/Bluefruit52Lib/src/BLEPeriph.cpp
+++ b/libraries/Bluefruit52Lib/src/BLEPeriph.cpp
@@ -45,7 +45,7 @@ BLEPeriph::BLEPeriph(void)
   _ppcp = ((ble_gap_conn_params_t) {
     .min_conn_interval = BLE_GAP_CONN_MIN_INTERVAL_DFLT,
     .max_conn_interval = BLE_GAP_CONN_MAX_INTERVAL_DFLT,
-    .slave_latency     = 0,
+    .slave_latency     = 30,
     .conn_sup_timeout  = BLE_GAP_CONN_SUPERVISION_TIMEOUT_MS / 10 // in 10ms unit
   });
 
@@ -132,7 +132,7 @@ void BLEPeriph::_eventHandler(ble_evt_t* evt)
       {
         // Connection interval set by Central is out of preferred range
         // Try to negotiate with Central using our preferred values
-        if ( !is_within(_ppcp.min_conn_interval, para->conn_params.min_conn_interval, _ppcp.max_conn_interval) )
+        if ( !is_within(_ppcp.min_conn_interval, para->conn_params.min_conn_interval, _ppcp.max_conn_interval) || _ppcp.slave_latency != para->conn_params.slave_latency )
         {
           VERIFY_STATUS( sd_ble_gap_conn_param_update(conn_hdl, &_ppcp), );
         }
diff --git a/libraries/Bluefruit52Lib/src/services/BLEHidAdafruit.cpp b/libraries/Bluefruit52Lib/src/services/BLEHidAdafruit.cpp
index 293c421..2010672 100644
--- a/libraries/Bluefruit52Lib/src/services/BLEHidAdafruit.cpp
+++ b/libraries/Bluefruit52Lib/src/services/BLEHidAdafruit.cpp
@@ -386,78 +386,78 @@ bool BLEHidAdafruit::mousePan(uint16_t conn_hdl, int8_t pan)
 //------------- Keyboard -------------//
 bool BLEHidAdafruit::keyboardReport(hid_keyboard_report_t* report)
 {
-  return keyboardReport(BLE_GATT_HANDLE_INVALID, report);
+  return keyboardReport(BLE_CONN_HANDLE_INVALID, report);
 }
 
 bool BLEHidAdafruit::keyboardReport(uint8_t modifier, uint8_t keycode[6])
 {
-  return keyboardReport(BLE_GATT_HANDLE_INVALID, modifier, keycode);
+  return keyboardReport(BLE_CONN_HANDLE_INVALID, modifier, keycode);
 }
 
 bool BLEHidAdafruit::keyPress(char ch)
 {
-  return keyPress(BLE_GATT_HANDLE_INVALID, ch);
+  return keyPress(BLE_CONN_HANDLE_INVALID, ch);
 }
 
 bool BLEHidAdafruit::keyRelease(void)
 {
-  return keyRelease(BLE_GATT_HANDLE_INVALID);
+  return keyRelease(BLE_CONN_HANDLE_INVALID);
 }
 
 bool BLEHidAdafruit::keySequence(const char* str, int interval)
 {
-  return keySequence(BLE_GATT_HANDLE_INVALID, str, interval);
+  return keySequence(BLE_CONN_HANDLE_INVALID, str, interval);
 }
 
 //------------- Consumer Media Keys -------------//
 bool BLEHidAdafruit::consumerReport(uint16_t usage_code)
 {
-  return consumerReport(BLE_GATT_HANDLE_INVALID, usage_code);
+  return consumerReport(BLE_CONN_HANDLE_INVALID, usage_code);
 }
 
 bool BLEHidAdafruit::consumerKeyPress(uint16_t usage_code)
 {
-  return consumerKeyPress(BLE_GATT_HANDLE_INVALID, usage_code);
+  return consumerKeyPress(BLE_CONN_HANDLE_INVALID, usage_code);
 }
 
 bool BLEHidAdafruit::consumerKeyRelease(void)
 {
-  return consumerKeyRelease(BLE_GATT_HANDLE_INVALID);
+  return consumerKeyRelease(BLE_CONN_HANDLE_INVALID);
 }
 
 //------------- Mouse -------------//
 bool BLEHidAdafruit::mouseReport(hid_mouse_report_t* report)
 {
-  return mouseReport(BLE_GATT_HANDLE_INVALID, report);
+  return mouseReport(BLE_CONN_HANDLE_INVALID, report);
 }
 
 bool BLEHidAdafruit::mouseReport(uint8_t buttons, int8_t x, int8_t y, int8_t wheel, int8_t pan)
 {
-  return mouseReport(BLE_GATT_HANDLE_INVALID, buttons, x, y, wheel, pan);
+  return mouseReport(BLE_CONN_HANDLE_INVALID, buttons, x, y, wheel, pan);
 }
 
 bool BLEHidAdafruit::mouseButtonPress(uint8_t buttons)
 {
-  return mouseButtonPress(BLE_GATT_HANDLE_INVALID, buttons);
+  return mouseButtonPress(BLE_CONN_HANDLE_INVALID, buttons);
 }
 
 bool BLEHidAdafruit::mouseButtonRelease(void)
 {
-  return mouseButtonRelease(BLE_GATT_HANDLE_INVALID);
+  return mouseButtonRelease(BLE_CONN_HANDLE_INVALID);
 }
 
 bool BLEHidAdafruit::mouseMove(int8_t x, int8_t y)
 {
-  return mouseMove(BLE_GATT_HANDLE_INVALID, x, y);
+  return mouseMove(BLE_CONN_HANDLE_INVALID, x, y);
 }
 
 bool BLEHidAdafruit::mouseScroll(int8_t scroll)
 {
-  return mouseScroll(BLE_GATT_HANDLE_INVALID, scroll);
+  return mouseScroll(BLE_CONN_HANDLE_INVALID, scroll);
 }
 
 bool BLEHidAdafruit::mousePan(int8_t pan)
 {
-  return mousePan(BLE_GATT_HANDLE_INVALID, pan);
+  return mousePan(BLE_CONN_HANDLE_INVALID, pan);
 }
 
